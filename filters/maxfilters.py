# -*- coding: utf-8 -*-
"""maxFilters.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PtCScBOB8_uiHEesrx4grJwkE2L5LhrL
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

def apply_max_filter(image, kernel_size):
    pad_size = kernel_size // 2
    padded_image = np.pad(image, pad_size, mode='constant', constant_values=0)
    filtered_image = np.zeros_like(image)

    for i in range(image.shape[0]):
        for j in range(image.shape[1]):
            filtered_image[i, j] = np.max(padded_image[i:i+kernel_size, j:j+kernel_size])

    return filtered_image

# Paths to images
image_path = '/content/drive/MyDrive/imageProcessing-nitw/Fig0507(b)(ckt-board-gauss-var-400).tif'
additional_image_path = '/content/drive/MyDrive/imageProcessing-nitw/Fig0507(a)(ckt-board-orig).tif'

# Read images
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
additional_image = cv2.imread(additional_image_path, cv2.IMREAD_GRAYSCALE)

# Check if images are loaded
if image is None:
    print(f"Failed to load image from {image_path}")
elif additional_image is None:
    print(f"Failed to load image from {additional_image_path}")
else:
    # Apply max filter
    filtered_max = apply_max_filter(image, 3)

    # Display images
    plt.figure(figsize=(16, 4))
    plt.subplot(1, 4, 1)
    plt.imshow(additional_image, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 4, 2)
    plt.imshow(image, cmap='gray')
    plt.title('Gaussian Noise')
    plt.axis('off')

    plt.subplot(1, 4, 3)
    plt.imshow(filtered_max, cmap='gray')
    plt.title('Max Filter (3x3)')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

