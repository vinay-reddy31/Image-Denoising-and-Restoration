# -*- coding: utf-8 -*-
"""geometric_mean.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_KGjjG9Qp-koM6BYAa3kQtohq4Vku4LG
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

def apply_geometric_mean_filter(image, kernel_size):
    padded_image = cv2.copyMakeBorder(image, kernel_size//2, kernel_size//2, kernel_size//2, kernel_size//2, cv2.BORDER_REFLECT)
    output_image = np.zeros_like(image, dtype=np.float32)
    for i in range(kernel_size//2, padded_image.shape[0]-kernel_size//2):
        for j in range(kernel_size//2, padded_image.shape[1]-kernel_size//2):
            neighborhood = padded_image[i-kernel_size//2:i+kernel_size//2+1, j-kernel_size//2:j+kernel_size//2+1]
            geometric_mean = np.exp(np.mean(np.log(neighborhood)))
            output_image[i-kernel_size//2, j-kernel_size//2] = geometric_mean
    return np.uint8(output_image)

# Paths to images
# Paths to images
image_path = '/content/drive/MyDrive/imageProcessing-nitw/Fig0507(b)(ckt-board-gauss-var-400).tif'
additional_image_path = '/content/drive/MyDrive/imageProcessing-nitw/Fig0507(a)(ckt-board-orig).tif'

# Read images

# Read images
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
additional_image = cv2.imread(additional_image_path, cv2.IMREAD_GRAYSCALE)

# Check if images are loaded
if image is None:
    print(f"Failed to load image from {image_path}")
elif additional_image is None:
    print(f"Failed to load image from {additional_image_path}")
else:
    # Apply geometric mean filter
    filtered_geometric_mean = apply_geometric_mean_filter(image, 3)

    # Display images
    plt.figure(figsize=(16, 4))
    plt.subplot(1, 4, 1)
    plt.imshow(additional_image, cmap='gray')
    plt.title('original  Image')
    plt.axis('off')
    plt.subplot(1, 4, 2)
    plt.imshow(image, cmap='gray')
    plt.title('Gaussian Noise')
    plt.axis('off')

    plt.subplot(1, 4, 3)
    plt.imshow(filtered_geometric_mean, cmap='gray')
    plt.title('Geometric Mean Filter (3x3)')
    plt.axis('off')



    plt.tight_layout()
    plt.show()

