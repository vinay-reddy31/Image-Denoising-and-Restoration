# -*- coding: utf-8 -*-
"""ideal_high_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ceJbITv21JHx3V5l_OfRCV6SpG9bqepl
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
def ideal_high_pass_filter(image, cutoff):
    dft = cv2.dft(np.float32(image), flags=cv2.DFT_COMPLEX_OUTPUT)
    dft_shift = np.fft.fftshift(dft)

    rows, cols = image.shape
    crow, ccol = rows // 2, cols // 2

    mask = np.ones((rows, cols, 2), np.float32)
    for i in range(rows):
        for j in range(cols):
            distance = np.sqrt((i - crow)**2 + (j - ccol)**2)
            if distance <= cutoff:
                mask[i, j] = 0

    fshift = dft_shift * mask
    f_ishift = np.fft.ifftshift(fshift)
    img_back = cv2.idft(f_ishift)
    img_back = cv2.magnitude(img_back[:,:,0], img_back[:,:,1])

    return img_back
image = cv2.imread('/content/drive/MyDrive/imageProcessing-nitw/Fig0441(a)(characters_test_pattern).tif', 0)
filtered_image = ideal_high_pass_filter(image, 30)

plt.figure(figsize=(10,5))
plt.subplot(121), plt.imshow(image, cmap='gray'), plt.title('Original Image')
plt.subplot(122), plt.imshow(filtered_image, cmap='gray'), plt.title('Ideal High Pass Filtered Image')
plt.show()

